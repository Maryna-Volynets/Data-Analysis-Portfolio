--Data preparation
/*Skills used: DDL statements, DML statements, Joins, Converting Data Types, 
CTE's, Temp Tables, Aggregate Functions*/

CREATE TABLE "202412-divvy-tripdata" ( --creating 12 data tables
	ride_id       TEXT PRIMARY KEY,
	rideable_type TEXT,
	started_at    TIMESTAMP,
	ended_at      TIMESTAMP,
	start_station_name TEXT,
	start_station_id   TEXT,
	end_station_name   TEXT,
	end_station_id     TEXT,
	start_lat     TEXT, --assign the data type text, because numeric types give an error when importing data
	start_lng     TEXT,
	end_lat       TEXT,
	end_lng       TEXT,
	member_casual TEXT
);

CREATE TABLE "year-divvy-tripdata" AS (
	 SELECT * FROM public."202401-divvy-tripdata" UNION
	 SELECT * FROM public."202402-divvy-tripdata" UNION
	 SELECT * FROM public."202403-divvy-tripdata" UNION
	 SELECT * FROM public."202404-divvy-tripdata" UNION
	 SELECT * FROM public."202405-divvy-tripdata" UNION
	 SELECT * FROM public."202406-divvy-tripdata" UNION
	 SELECT * FROM public."202407-divvy-tripdata" UNION
	 SELECT * FROM public."202408-divvy-tripdata" UNION
	 SELECT * FROM public."202409-divvy-tripdata" UNION
	 SELECT * FROM public."202410-divvy-tripdata" UNION
	 SELECT * FROM public."202411-divvy-tripdata" UNION
	 SELECT * FROM public."202412-divvy-tripdata"
);--union all tables

--converting data types:
ALTER TABLE public."year-divvy-tripdata" 
	ALTER COLUMN start_lat TYPE FLOAT USING start_lat::FLOAT,
	ALTER COLUMN start_lng TYPE FLOAT USING start_lng::FLOAT,
	ALTER COLUMN end_lat   TYPE FLOAT USING NULLIF(end_lat, '')::FLOAT,
	ALTER COLUMN end_lng   TYPE FLOAT USING NULLIF(end_lng, '')::FLOAT;

--checking the length of records in the ride_id field:
SELECT 
	MIN(LENGTH (ride_id)) AS min_ride_id,
	MAX(LENGTH (ride_id)) AS max_ride_id
FROM public."year-divvy-tripdata";

--total and unique number of records
SELECT 
	COUNT (ride_id)                           AS cnt_ride_id,
	COUNT (ride_id)- COUNT (DISTINCT ride_id) AS dupl_ride_id
FROM public."year-divvy-tripdata";

/*Data cleaning*/
--Skills used: DML statements, Aggregate Functions, Subqueries, CTE's 

--duplicate removal:
DELETE FROM public."year-divvy-tripdata"
WHERE ride_id IN (
			    SELECT ride_id
			    FROM public."year-divvy-tripdata"
			    GROUP BY ride_id
				HAVING COUNT (ride_id)>1) AND started_at IN (
															SELECT MAX (started_at)
														    FROM public."year-divvy-tripdata"
														    GROUP BY ride_id
															HAVING COUNT (ride_id)>1);
	
--delete records where the end_lat and end_lng columns contain NULL:
DELETE FROM public."year-divvy-tripdata"
       WHERE end_lat IS NULL OR 
	         end_lng IS NULL;

--delete rows where the trip start time is later than or equal to the trip end time:
DELETE FROM public."year-divvy-tripdata"
WHERE started_at >= ended_at;

--create coordinate table:
CREATE TABLE coordinate AS (
							WITH t_tr AS (
										SELECT ride_id,
											   CONCAT(start_lat, start_lng) AS coord_start,
											   CONCAT(end_lat, end_lng)     AS coord_end
										FROM public."year-divvy-tripdata"
										 )
							SELECT *
							FROM t_tr
							);

--create dis_coord_start table with start station unique coordinates:
CREATE TABLE dis_coord_start AS (
								SELECT DISTINCT coord_start
								FROM public.coordinate
								);

--add surrogate key:
ALTER TABLE dis_coord_start 
	ADD column start_id int not null 
	generated by default as identity (increment by 1 start 1 
    minvalue 1 maxvalue 977689 cache 1);

--create dis_coord_end table with end station unique coordinates::
CREATE TABLE dis_coord_end AS (
							SELECT DISTINCT coord_end
							FROM public.coordinate
							);

--add surrogate key:
ALTER TABLE dis_coord_end 
	ADD column end_id int not null 
	generated by default as identity (increment by 1 start 1 
    minvalue 1 maxvalue 3814 cache 1);

CREATE TABLE public."year-divvy-tripdata-new" AS (
			SELECT a.ride_id, a.rideable_type, a.started_at, a.ended_at, b.start_id, a.start_station_name, a.start_station_id, 
					e.end_id, a.end_station_name, a.end_station_id, a.start_lat, a.start_lng, a.end_lat, a.end_lng, 
					a.member_casual
			FROM  public."year-divvy-tripdata" a
			LEFT JOIN public.coordinate f
				ON a.ride_id=f.ride_id
			LEFT JOIN public.dis_coord_start b
				ON f.coord_start=b.coord_start
			LEFT JOIN public.dis_coord_end e
				ON f.coord_end=e.coord_end);

--delete records with the same coordinates but different names:
DELETE FROM public."year-divvy-tripdata-new"
WHERE start_id IN (
					SELECT start_id FROM (
										SELECT DISTINCT start_id, 
														start_station_name, 
														start_station_id, 
														start_lat, 
														start_lng
										FROM public."year-divvy-tripdata-new"
										)
					GROUP BY start_id
					HAVING COUNT (start_id)>1
					);

DELETE FROM public."year-divvy-tripdata-new"
	WHERE end_id IN (
					SELECT end_id
					FROM (
						 SELECT DISTINCT end_id, 
										 end_station_name, 
										 end_station_id, 
										 end_lat, 
										 end_lng
						 FROM public."year-divvy-tripdata-new"
						 )
					GROUP BY end_id
					HAVING COUNT (end_id)>1
	                );

--create table with start station data:
CREATE TABLE start_stations AS (
			SELECT DISTINCT start_id, 
							start_station_name, 
							start_station_id, 
							start_lat, 
							start_lng
			FROM public."year-divvy-tripdata-new"
            );
--add primary key.

--create table with end station data:
CREATE TABLE end_stations AS (
			SELECT DISTINCT end_id, end_station_name, end_station_id, end_lat, end_lng
			FROM public."year-divvy-tripdata-new"
            );
--add primary key.

--delete stations data from main table:
ALTER TABLE public."year-divvy-tripdata-new"
	DROP start_station_name,
	DROP start_station_id,
	DROP end_station_name,
	DROP end_station_id,
	DROP start_lat,
	DROP start_lng,
	DROP end_lat,
	DROP end_lng;

--add foreign key:
ALTER TABLE public."year-divvy-tripdata-new"
		ADD FOREIGN KEY (start_id) REFERENCES public.start_stations (start_id),
		ADD FOREIGN KEY (end_id)   REFERENCES public.end_stations (end_id);

/*Data analysis*/
--Skills used: Aggregate Functions, Subqueries, CTE's

--determining the number of trips and average duration per member/casual
SELECT  member_casual,
		COUNT (member_casual) AS cnt_trips,
		AVG (ride_length)     AS avg_trip
FROM   (
		 SELECT member_casual,
				(ended_at-started_at) AS ride_length --trip length
		 FROM public."year-divvy-tripdata-new" 
		)
GROUP BY member_casual
ORDER BY 2 DESC;

--determining the number of trips and average duration per member/casual by day
SELECT  member_casual,
		day_of_week,
		COUNT (member_casual) AS cnt_trips,
		AVG (ride_length)     AS avg_trip
FROM (
	  SELECT member_casual,
			 (ended_at-started_at) AS ride_length, --trip length
			  CASE 
				   WHEN EXTRACT(DOW FROM started_at) = 0 THEN 'Sunday'
				   WHEN EXTRACT(DOW FROM started_at) = 1 THEN 'Monday'
				   WHEN EXTRACT(DOW FROM started_at) = 2 THEN 'Tuesday'
				   WHEN EXTRACT(DOW FROM started_at) = 3 THEN 'Wednesday'
				   WHEN EXTRACT(DOW FROM started_at) = 4 THEN 'Thursday'
				   WHEN EXTRACT(DOW FROM started_at) = 5 THEN 'Friday'
				   WHEN EXTRACT(DOW FROM started_at) = 6 THEN 'Saturday'
				   ELSE 'Other'
			  END AS day_of_week --replacing the day of the week number with the name
	   FROM public."year-divvy-tripdata-new"
		)
GROUP BY 1, 2
ORDER BY 1, 3 DESC;

--determining the number of trips and average duration per member/casual by month
SELECT	member_casual,
		month_name,
		COUNT (member_casual) AS cnt_trips,
		AVG (ride_length)     AS avg_trip
FROM (
	  SELECT member_casual,
		     (ended_at-started_at) AS ride_length, --trip length
		     CASE 
				   WHEN EXTRACT(MONTH FROM started_at) = 1  THEN 'January'
				   WHEN EXTRACT(MONTH FROM started_at) = 2  THEN 'February'
				   WHEN EXTRACT(MONTH FROM started_at) = 3  THEN 'March'
				   WHEN EXTRACT(MONTH FROM started_at) = 4  THEN 'April'
				   WHEN EXTRACT(MONTH FROM started_at) = 5  THEN 'May'
				   WHEN EXTRACT(MONTH FROM started_at) = 6  THEN 'June'
				   WHEN EXTRACT(MONTH FROM started_at) = 7  THEN 'July'
				   WHEN EXTRACT(MONTH FROM started_at) = 8  THEN 'August'
				   WHEN EXTRACT(MONTH FROM started_at) = 9  THEN 'September'
				   WHEN EXTRACT(MONTH FROM started_at) = 10 THEN 'October'
				   WHEN EXTRACT(MONTH FROM started_at) = 11 THEN 'November'
				   WHEN EXTRACT(MONTH FROM started_at) = 12 THEN 'December'
				   ELSE 'Other'
			 END AS month_name	--replacing the month of the year number with the name
		FROM public."year-divvy-tripdata-new"
		)
GROUP BY month_name, member_casual
ORDER BY 1 DESC, 3 DESC;

--how many trips started at each start station
WITH temp_t AS (
				SELECT start_id,
						member_casual,
					   (ended_at-started_at) AS ride_length --trip length
				FROM public."year-divvy-tripdata-new"
				)
SELECT a.start_id,
	   d.member_casual,
	   a.start_lat,
	   a.start_lng,
	   COUNT (d.start_id)  AS cnt_trips,
	   AVG (d.ride_length) AS avg_length
FROM public.start_stations a
	LEFT JOIN temp_t d
	ON a.start_id = d.start_id
WHERE d.member_casual IS NOT NULL
GROUP BY 1, 2
ORDER BY 5 DESC; 

/*For Visualization*/
SELECT a.ride_id,
	   a.member_casual,
	   (a.ended_at-a.started_at) AS ride_length, --trip length
		CASE 
				   WHEN EXTRACT(MONTH FROM a.started_at) = 1  THEN 'January'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 2  THEN 'February'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 3  THEN 'March'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 4  THEN 'April'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 5  THEN 'May'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 6  THEN 'June'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 7  THEN 'July'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 8  THEN 'August'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 9  THEN 'September'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 10 THEN 'October'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 11 THEN 'November'
				   WHEN EXTRACT(MONTH FROM a.started_at) = 12 THEN 'December'
				   ELSE 'Other'
			 END AS month_name,	--replacing the month of the year number with the name
		  CASE 
				   WHEN EXTRACT(DOW FROM a.started_at) = 0 THEN 'Sunday'
				   WHEN EXTRACT(DOW FROM a.started_at) = 1 THEN 'Monday'
				   WHEN EXTRACT(DOW FROM a.started_at) = 2 THEN 'Tuesday'
				   WHEN EXTRACT(DOW FROM a.started_at) = 3 THEN 'Wednesday'
				   WHEN EXTRACT(DOW FROM a.started_at) = 4 THEN 'Thursday'
				   WHEN EXTRACT(DOW FROM a.started_at) = 5 THEN 'Friday'
				   WHEN EXTRACT(DOW FROM a.started_at) = 6 THEN 'Saturday'
			   ELSE 'Other'
		  END AS day_of_week, --replacing the day of the week number with the name
				 a.start_id,
				 b.start_lat,
				 b.start_lng
	   FROM public."year-divvy-tripdata-new" a
		LEFT JOIN public.start_stations b
		ON a.start_id = b.start_id
LIMIT 980000; --we assume that a sample of this size is sufficient to reflect the main trends.


